
SAMPLE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000692  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000692  00000726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000a6  008000a6  0000076c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d42  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001be  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bf  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00001cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000226  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000053d  00000000  00000000  0000206a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000025a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	9e c2       	rjmp	.+1340   	; 0x542 <__vector_1>
   6:	00 00       	nop
   8:	d9 c1       	rjmp	.+946    	; 0x3bc <__vector_2>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e9       	ldi	r30, 0x92	; 146
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3a       	cpi	r26, 0xA6	; 166
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 ea       	ldi	r26, 0xA6	; 166
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3a       	cpi	r26, 0xAD	; 173
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	5c d0       	rcall	.+184    	; 0x140 <main>
  88:	02 c3       	rjmp	.+1540   	; 0x68e <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <on_off1>:
{ on_off1();  //switching on off lights to read data 
}
DDRB=0xFF; //makes portb for o/p again as it has to be to transmit data
}
void on_off1()
{ mrlcd_control|=(1<<light_switch);
  8c:	da 9a       	sbi	0x1b, 2	; 27
   asm volatile("nop");          //since lcd requires some time to see data to fully get it what we have told it to do
  8e:	00 00       	nop
   asm volatile("nop");          // assembly command for delay
  90:	00 00       	nop
 mrlcd_control&=~(1<<light_switch);
  92:	da 98       	cbi	0x1b, 2	; 27
  94:	08 95       	ret

00000096 <check_busy1>:
void goto_location1(unsigned int x,unsigned int y);
void initialize_lcd1(void);


void check_busy1()
{ DDRB=0b00000000; //since first we want to know from lcd to give info abt he is bsy or not portb is for i/p
  96:	17 ba       	out	0x17, r1	; 23
  mrlcd_control|=(1<<read_write); //sets for reading
  98:	d9 9a       	sbi	0x1b, 1	; 27
  mrlcd_control&=~(1<<what_we_send); //sice lcd sends commmand
  9a:	d8 98       	cbi	0x1b, 0	; 27
 while(mrlcd_data>=0X80) // if pb7 is 1 lcd busy else not portb=10000000; binary to hex is 0x80 0x is symbol for hexadecimal
  9c:	c7 9b       	sbis	0x18, 7	; 24
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <check_busy1+0x10>
{ on_off1();  //switching on off lights to read data 
  a0:	f5 df       	rcall	.-22     	; 0x8c <on_off1>

void check_busy1()
{ DDRB=0b00000000; //since first we want to know from lcd to give info abt he is bsy or not portb is for i/p
  mrlcd_control|=(1<<read_write); //sets for reading
  mrlcd_control&=~(1<<what_we_send); //sice lcd sends commmand
 while(mrlcd_data>=0X80) // if pb7 is 1 lcd busy else not portb=10000000; binary to hex is 0x80 0x is symbol for hexadecimal
  a2:	c7 99       	sbic	0x18, 7	; 24
  a4:	fd cf       	rjmp	.-6      	; 0xa0 <check_busy1+0xa>
{ on_off1();  //switching on off lights to read data 
}
DDRB=0xFF; //makes portb for o/p again as it has to be to transmit data
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret

000000ac <send_a_command1>:
 mrlcd_control&=~(1<<light_switch);
                           // off lights to process data
                           //$$$ we not include delay here but it require some time to process data we will include delay in main
}
void send_a_command1(unsigned char vamp)
{ check_busy1();
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
  b0:	f2 df       	rcall	.-28     	; 0x96 <check_busy1>
  mrlcd_control&=~(1<<read_write);    //sets for writing lcd
  b2:	d9 98       	cbi	0x1b, 1	; 27
  mrlcd_control&=~(1<<what_we_send);  //ensure we are sending command
  b4:	d8 98       	cbi	0x1b, 0	; 27
  mrlcd_data=vamp;                    //giving data to lcd as portb connect to data pins
  b6:	c8 bb       	out	0x18, r28	; 24
  on_off1();                           //setting lights on/off so that he can read data and process it
  b8:	e9 df       	rcall	.-46     	; 0x8c <on_off1>
  mrlcd_data=0;                       //again make it 0 so nothing gets sent
  ba:	18 ba       	out	0x18, r1	; 24
}
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <send_a_character1>:
void send_a_character1(unsigned char temp)
{ check_busy1();
  c0:	cf 93       	push	r28
  c2:	c8 2f       	mov	r28, r24
  c4:	e8 df       	rcall	.-48     	; 0x96 <check_busy1>
  mrlcd_control&=~(1<<read_write);    
  c6:	d9 98       	cbi	0x1b, 1	; 27
  mrlcd_control|=(1<<what_we_send);  //ensure we are sending command rest all same as sending command function
  c8:	d8 9a       	sbi	0x1b, 0	; 27
  mrlcd_data=temp;                    
  ca:	c8 bb       	out	0x18, r28	; 24
  on_off1();                           
  cc:	df df       	rcall	.-66     	; 0x8c <on_off1>
  mrlcd_data=0;
  ce:	18 ba       	out	0x18, r1	; 24
}                       
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <send_a_string1>:
void send_a_string1(unsigned char *p)
{  while(*p!='\0')
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
  da:	88 81       	ld	r24, Y
  dc:	88 23       	and	r24, r24
  de:	29 f0       	breq	.+10     	; 0xea <send_a_string1+0x16>
  e0:	21 96       	adiw	r28, 0x01	; 1
  { send_a_character1(*p++); //post increment first send p then by array increment of addres it points to a[1] then a[2] so on
  e2:	ee df       	rcall	.-36     	; 0xc0 <send_a_character1>
  mrlcd_data=temp;                    
  on_off1();                           
  mrlcd_data=0;
}                       
void send_a_string1(unsigned char *p)
{  while(*p!='\0')
  e4:	89 91       	ld	r24, Y+
  e6:	81 11       	cpse	r24, r1
  e8:	fc cf       	rjmp	.-8      	; 0xe2 <send_a_string1+0xe>
  { send_a_character1(*p++); //post increment first send p then by array increment of addres it points to a[1] then a[2] so on
                            //when null character we stop 
  }
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <goto_location1>:
void goto_location1(unsigned int x,unsigned int y)
{ send_a_command1(0x80+(x-1)+lcd1firstcolumnposition[y-1]);
  f0:	81 58       	subi	r24, 0x81	; 129
  f2:	fb 01       	movw	r30, r22
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	ee 59       	subi	r30, 0x9E	; 158
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	90 81       	ld	r25, Z
  fe:	89 0f       	add	r24, r25
 100:	d5 cf       	rjmp	.-86     	; 0xac <send_a_command1>
 102:	08 95       	ret

00000104 <initialize_lcd1>:

}
void initialize_lcd1(void)
{DDRA=0b11111111;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	87 e9       	ldi	r24, 0x97	; 151
 10a:	9a e3       	ldi	r25, 0x3A	; 58
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <initialize_lcd1+0x8>
 110:	00 c0       	rjmp	.+0      	; 0x112 <initialize_lcd1+0xe>
 112:	00 00       	nop
  _delay_ms(60);  //since lcd requires some time to get on 
send_a_command1(0x31); //command for clearing screen
 114:	81 e3       	ldi	r24, 0x31	; 49
 116:	ca df       	rcall	.-108    	; 0xac <send_a_command1>
 118:	8b e4       	ldi	r24, 0x4B	; 75
 11a:	9d e1       	ldi	r25, 0x1D	; 29
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <initialize_lcd1+0x18>
 120:	00 c0       	rjmp	.+0      	; 0x122 <initialize_lcd1+0x1e>
 122:	00 00       	nop
 _delay_ms(30);  //$$$ since we not include delay there to processs we include here as command needs some time to process ^^^data not needs^^^
  send_a_command1(0x38); //command used to tell we are using all data pins 8 bit data not 4 bit data
 124:	88 e3       	ldi	r24, 0x38	; 56
 126:	c2 df       	rcall	.-124    	; 0xac <send_a_command1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	9a e0       	ldi	r25, 0x0A	; 10
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <initialize_lcd1+0x26>
  _delay_us(30);    //***these time are given in datasheet with commands
  send_a_command1(0b00001100); //starting from left first 1 to make command on,second for making display on,third for displaying cursor, fourth is whether we want blinking or still cursor
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	bd df       	rcall	.-134    	; 0xac <send_a_command1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	87 e9       	ldi	r24, 0x97	; 151
 134:	9a e3       	ldi	r25, 0x3A	; 58
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <initialize_lcd1+0x32>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <initialize_lcd1+0x38>
 13c:	00 00       	nop
 13e:	08 95       	ret

00000140 <main>:
#include <util/delay.h>
#include <stdlib.h>
#include<avr/interrupt.h>
int y=1; int x=1; char a[3]; int i,j;
int main()
{ initialize_lcd1();
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	db df       	rcall	.-74     	; 0x104 <initialize_lcd1>
	goto_location1(3,1);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	cc df       	rcall	.-104    	; 0xf0 <goto_location1>
	send_a_string1("g@me starts in");
 158:	88 e6       	ldi	r24, 0x68	; 104
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	bb df       	rcall	.-138    	; 0xd4 <send_a_string1>
	
	goto_location1(10,2);
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	c4 df       	rcall	.-120    	; 0xf0 <goto_location1>
	send_a_string1("3");
 168:	87 e7       	ldi	r24, 0x77	; 119
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	b3 df       	rcall	.-154    	; 0xd4 <send_a_string1>
 16e:	2f e3       	ldi	r18, 0x3F	; 63
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	93 e0       	ldi	r25, 0x03	; 3
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <main+0x34>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <main+0x3e>
 17e:	00 00       	nop
	_delay_ms(1000);
	goto_location1(10,2);
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	8a e0       	ldi	r24, 0x0A	; 10
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	b3 df       	rcall	.-154    	; 0xf0 <goto_location1>
	send_a_string1(" ");
 18a:	8e e8       	ldi	r24, 0x8E	; 142
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	a2 df       	rcall	.-188    	; 0xd4 <send_a_string1>
	
	goto_location1(10,2);
 190:	62 e0       	ldi	r22, 0x02	; 2
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	ab df       	rcall	.-170    	; 0xf0 <goto_location1>
	send_a_string1("2");
 19a:	89 e7       	ldi	r24, 0x79	; 121
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	9a df       	rcall	.-204    	; 0xd4 <send_a_string1>
 1a0:	2f e3       	ldi	r18, 0x3F	; 63
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x66>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x70>
 1b0:	00 00       	nop
	_delay_ms(1000);
	goto_location1(10,2);
 1b2:	62 e0       	ldi	r22, 0x02	; 2
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	9a df       	rcall	.-204    	; 0xf0 <goto_location1>
	send_a_string1(" ");
 1bc:	8e e8       	ldi	r24, 0x8E	; 142
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	89 df       	rcall	.-238    	; 0xd4 <send_a_string1>
	
	goto_location1(10,2);
 1c2:	62 e0       	ldi	r22, 0x02	; 2
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	8a e0       	ldi	r24, 0x0A	; 10
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	92 df       	rcall	.-220    	; 0xf0 <goto_location1>
	send_a_string1("1");
 1cc:	8b e7       	ldi	r24, 0x7B	; 123
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	81 df       	rcall	.-254    	; 0xd4 <send_a_string1>
 1d2:	2f e3       	ldi	r18, 0x3F	; 63
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x98>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0xa2>
 1e2:	00 00       	nop
	_delay_ms(1000);
	goto_location1(10,2);
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	81 df       	rcall	.-254    	; 0xf0 <goto_location1>
	send_a_string1(" ");
 1ee:	8e e8       	ldi	r24, 0x8E	; 142
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	70 df       	rcall	.-288    	; 0xd4 <send_a_string1>
	
	goto_location1(3,1);           //to clear whole screen
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	79 df       	rcall	.-270    	; 0xf0 <goto_location1>
	send_a_string1("                  ");
 1fe:	8d e7       	ldi	r24, 0x7D	; 125
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	68 df       	rcall	.-304    	; 0xd4 <send_a_string1>
	 goto_location1(1,1);
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	71 df       	rcall	.-286    	; 0xf0 <goto_location1>
	 send_a_string1("p");
 20e:	80 e9       	ldi	r24, 0x90	; 144
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	60 df       	rcall	.-320    	; 0xd4 <send_a_string1>
	 
	 DDRD&=~(1<<PIND3);
 214:	8b 98       	cbi	0x11, 3	; 17
	 PORTD|=(1<<PIND3);
 216:	93 9a       	sbi	0x12, 3	; 18
		MCUCR|=1<<ISC11||1<<ISC10;                 //setting two external interrupts
 218:	85 b7       	in	r24, 0x35	; 53
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	85 bf       	out	0x35, r24	; 53
		GICR|=1<<INT0;                             //purpose of using interruppts is that
 21e:	8b b7       	in	r24, 0x3b	; 59
 220:	80 64       	ori	r24, 0x40	; 64
 222:	8b bf       	out	0x3b, r24	; 59
		                                           //1)bit_is_set is not sense to fast thrg switch
												   //2)if some statements are above bit_is_set in prgrm and btton is pressed before then nothing
												   //3)now in interrupt advantage is that when interrupt devlops normal execution of prgrm at current position stops and go to ISR code block
		DDRD&=~(1<<PIND2);
 224:	8a 98       	cbi	0x11, 2	; 17
		PORTD|=(1<<PIND2);
 226:	92 9a       	sbi	0x12, 2	; 18
		MCUCR|=1<<ISC01||1<<ISC00;
 228:	85 b7       	in	r24, 0x35	; 53
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	85 bf       	out	0x35, r24	; 53
		GICR|=1<<INT1;
 22e:	8b b7       	in	r24, 0x3b	; 59
 230:	80 68       	ori	r24, 0x80	; 128
 232:	8b bf       	out	0x3b, r24	; 59
	sei(); 
 234:	78 94       	sei
	
	
	 j=1;  i=16;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	90 93 a7 00 	sts	0x00A7, r25
 23e:	80 93 a6 00 	sts	0x00A6, r24
 242:	80 e1       	ldi	r24, 0x10	; 16
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	90 93 a9 00 	sts	0x00A9, r25
 24a:	80 93 a8 00 	sts	0x00A8, r24
		    goto_location1(i,j);
		    send_a_string1(" ");
		   switch(j)                        //zig zag pattern of hash going from cordinate changing like (16,1) then 15,2 then 14,1 so on
		   {
			case 1:
			j=2; 
 24e:	68 94       	set
 250:	ee 24       	eor	r14, r14
 252:	e1 f8       	bld	r14, 1
 254:	f1 2c       	mov	r15, r1
			break;
			case 2:
			j=1;
 256:	01 e0       	ldi	r16, 0x01	; 1
 258:	10 e0       	ldi	r17, 0x00	; 0
			
		   }
		i=i-1;
		 if(i==0)
		{
			i=16;
 25a:	c0 e1       	ldi	r28, 0x10	; 16
 25c:	d0 e0       	ldi	r29, 0x00	; 0
	sei(); 
	
	
	 j=1;  i=16;
	while(1)
	{ if(i==x&&j==y)
 25e:	80 91 a8 00 	lds	r24, 0x00A8
 262:	90 91 a9 00 	lds	r25, 0x00A9
 266:	20 91 60 00 	lds	r18, 0x0060
 26a:	30 91 61 00 	lds	r19, 0x0061
 26e:	82 17       	cp	r24, r18
 270:	93 07       	cpc	r25, r19
 272:	69 f5       	brne	.+90     	; 0x2ce <main+0x18e>
 274:	60 91 a6 00 	lds	r22, 0x00A6
 278:	70 91 a7 00 	lds	r23, 0x00A7
 27c:	20 91 62 00 	lds	r18, 0x0062
 280:	30 91 63 00 	lds	r19, 0x0063
 284:	62 17       	cp	r22, r18
 286:	73 07       	cpc	r23, r19
 288:	11 f5       	brne	.+68     	; 0x2ce <main+0x18e>
		{  goto_location1(x,y);
 28a:	32 df       	rcall	.-412    	; 0xf0 <goto_location1>
			send_a_string1(" ");
 28c:	8e e8       	ldi	r24, 0x8E	; 142
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	21 df       	rcall	.-446    	; 0xd4 <send_a_string1>
			goto_location1(i,j);
 292:	60 91 a6 00 	lds	r22, 0x00A6
 296:	70 91 a7 00 	lds	r23, 0x00A7
 29a:	80 91 a8 00 	lds	r24, 0x00A8
 29e:	90 91 a9 00 	lds	r25, 0x00A9
 2a2:	26 df       	rcall	.-436    	; 0xf0 <goto_location1>
			send_a_string1(" ");
 2a4:	8e e8       	ldi	r24, 0x8E	; 142
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	15 df       	rcall	.-470    	; 0xd4 <send_a_string1>
			goto_location1(3,1);
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	83 e0       	ldi	r24, 0x03	; 3
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	1e df       	rcall	.-452    	; 0xf0 <goto_location1>
			send_a_string1("game over");
 2b4:	82 e9       	ldi	r24, 0x92	; 146
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0d df       	rcall	.-486    	; 0xd4 <send_a_string1>
 2ba:	2f e7       	ldi	r18, 0x7F	; 127
 2bc:	8a e1       	ldi	r24, 0x1A	; 26
 2be:	96 e0       	ldi	r25, 0x06	; 6
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x180>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0x18a>
 2ca:	00 00       	nop
 2cc:	6e c0       	rjmp	.+220    	; 0x3aa <main+0x26a>
			break;
			
		}
	else{
		  	
		   goto_location1(i,j);
 2ce:	60 91 a6 00 	lds	r22, 0x00A6
 2d2:	70 91 a7 00 	lds	r23, 0x00A7
 2d6:	0c df       	rcall	.-488    	; 0xf0 <goto_location1>
		    send_a_string1("#");
 2d8:	8c e9       	ldi	r24, 0x9C	; 156
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fb de       	rcall	.-522    	; 0xd4 <send_a_string1>
 2de:	2f e3       	ldi	r18, 0x3F	; 63
 2e0:	8d e0       	ldi	r24, 0x0D	; 13
 2e2:	93 e0       	ldi	r25, 0x03	; 3
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x1a4>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x1ae>
 2ee:	00 00       	nop
		   _delay_ms(1000);
		    goto_location1(i,j);
 2f0:	60 91 a6 00 	lds	r22, 0x00A6
 2f4:	70 91 a7 00 	lds	r23, 0x00A7
 2f8:	80 91 a8 00 	lds	r24, 0x00A8
 2fc:	90 91 a9 00 	lds	r25, 0x00A9
 300:	f7 de       	rcall	.-530    	; 0xf0 <goto_location1>
		    send_a_string1(" ");
 302:	8e e8       	ldi	r24, 0x8E	; 142
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	e6 de       	rcall	.-564    	; 0xd4 <send_a_string1>
		   switch(j)                        //zig zag pattern of hash going from cordinate changing like (16,1) then 15,2 then 14,1 so on
 308:	80 91 a6 00 	lds	r24, 0x00A6
 30c:	90 91 a7 00 	lds	r25, 0x00A7
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	91 05       	cpc	r25, r1
 314:	19 f0       	breq	.+6      	; 0x31c <main+0x1dc>
 316:	02 97       	sbiw	r24, 0x02	; 2
 318:	31 f0       	breq	.+12     	; 0x326 <main+0x1e6>
 31a:	09 c0       	rjmp	.+18     	; 0x32e <main+0x1ee>
		   {
			case 1:
			j=2; 
 31c:	f0 92 a7 00 	sts	0x00A7, r15
 320:	e0 92 a6 00 	sts	0x00A6, r14
			break;
 324:	04 c0       	rjmp	.+8      	; 0x32e <main+0x1ee>
			case 2:
			j=1;
 326:	10 93 a7 00 	sts	0x00A7, r17
 32a:	00 93 a6 00 	sts	0x00A6, r16
			break;
			
		   }
		i=i-1;
 32e:	80 91 a8 00 	lds	r24, 0x00A8
 332:	90 91 a9 00 	lds	r25, 0x00A9
 336:	01 97       	sbiw	r24, 0x01	; 1
		 if(i==0)
 338:	00 97       	sbiw	r24, 0x00	; 0
 33a:	29 f0       	breq	.+10     	; 0x346 <main+0x206>
			case 2:
			j=1;
			break;
			
		   }
		i=i-1;
 33c:	90 93 a9 00 	sts	0x00A9, r25
 340:	80 93 a8 00 	sts	0x00A8, r24
 344:	04 c0       	rjmp	.+8      	; 0x34e <main+0x20e>
		 if(i==0)
		{
			i=16;
 346:	d0 93 a9 00 	sts	0x00A9, r29
 34a:	c0 93 a8 00 	sts	0x00A8, r28
		}
	}
	if(x==16)
 34e:	80 91 60 00 	lds	r24, 0x0060
 352:	90 91 61 00 	lds	r25, 0x0061
 356:	40 97       	sbiw	r24, 0x10	; 16
 358:	09 f0       	breq	.+2      	; 0x35c <main+0x21c>
 35a:	81 cf       	rjmp	.-254    	; 0x25e <main+0x11e>
	{
		goto_location1(x,y);
 35c:	60 91 62 00 	lds	r22, 0x0062
 360:	70 91 63 00 	lds	r23, 0x0063
 364:	80 e1       	ldi	r24, 0x10	; 16
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	c3 de       	rcall	.-634    	; 0xf0 <goto_location1>
		send_a_string1(" ");
 36a:	8e e8       	ldi	r24, 0x8E	; 142
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	b2 de       	rcall	.-668    	; 0xd4 <send_a_string1>
		goto_location1(i,j);
 370:	60 91 a6 00 	lds	r22, 0x00A6
 374:	70 91 a7 00 	lds	r23, 0x00A7
 378:	80 91 a8 00 	lds	r24, 0x00A8
 37c:	90 91 a9 00 	lds	r25, 0x00A9
 380:	b7 de       	rcall	.-658    	; 0xf0 <goto_location1>
		send_a_string1(" ");
 382:	8e e8       	ldi	r24, 0x8E	; 142
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	a6 de       	rcall	.-692    	; 0xd4 <send_a_string1>
		goto_location1(3,1);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	af de       	rcall	.-674    	; 0xf0 <goto_location1>
		send_a_string1("you win");
 392:	8e e9       	ldi	r24, 0x9E	; 158
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	9e de       	rcall	.-708    	; 0xd4 <send_a_string1>
 398:	2f e7       	ldi	r18, 0x7F	; 127
 39a:	8a e1       	ldi	r24, 0x1A	; 26
 39c:	96 e0       	ldi	r25, 0x06	; 6
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0x25e>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0x268>
 3a8:	00 00       	nop
		_delay_ms(100);
		send_a_string(" ");
	}*/
	

}
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	08 95       	ret

000003bc <__vector_2>:
ISR(INT1_vect)
{  if(i==x&&j==y)
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	20 91 a8 00 	lds	r18, 0x00A8
 3e2:	30 91 a9 00 	lds	r19, 0x00A9
 3e6:	80 91 60 00 	lds	r24, 0x0060
 3ea:	90 91 61 00 	lds	r25, 0x0061
 3ee:	28 17       	cp	r18, r24
 3f0:	39 07       	cpc	r19, r25
 3f2:	71 f5       	brne	.+92     	; 0x450 <__vector_2+0x94>
 3f4:	60 91 a6 00 	lds	r22, 0x00A6
 3f8:	70 91 a7 00 	lds	r23, 0x00A7
 3fc:	40 91 62 00 	lds	r20, 0x0062
 400:	50 91 63 00 	lds	r21, 0x0063
 404:	64 17       	cp	r22, r20
 406:	75 07       	cpc	r23, r21
 408:	19 f5       	brne	.+70     	; 0x450 <__vector_2+0x94>
	{  goto_location1(x,y);
 40a:	c9 01       	movw	r24, r18
 40c:	71 de       	rcall	.-798    	; 0xf0 <goto_location1>
		send_a_string1(" ");
 40e:	8e e8       	ldi	r24, 0x8E	; 142
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	60 de       	rcall	.-832    	; 0xd4 <send_a_string1>
		goto_location1(i,j);
 414:	60 91 a6 00 	lds	r22, 0x00A6
 418:	70 91 a7 00 	lds	r23, 0x00A7
 41c:	80 91 a8 00 	lds	r24, 0x00A8
 420:	90 91 a9 00 	lds	r25, 0x00A9
 424:	65 de       	rcall	.-822    	; 0xf0 <goto_location1>
		send_a_string1(" ");
 426:	8e e8       	ldi	r24, 0x8E	; 142
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	54 de       	rcall	.-856    	; 0xd4 <send_a_string1>
		goto_location1(3,1);
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	5d de       	rcall	.-838    	; 0xf0 <goto_location1>
		send_a_string1("game over");
 436:	82 e9       	ldi	r24, 0x92	; 146
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	4c de       	rcall	.-872    	; 0xd4 <send_a_string1>
 43c:	2f e7       	ldi	r18, 0x7F	; 127
 43e:	8a e1       	ldi	r24, 0x1A	; 26
 440:	96 e0       	ldi	r25, 0x06	; 6
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <__vector_2+0x86>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__vector_2+0x90>
 44c:	00 00       	nop
 44e:	3b c0       	rjmp	.+118    	; 0x4c6 <__vector_2+0x10a>
		
	}
	else
	{    
		
	        if(y==1)
 450:	20 91 62 00 	lds	r18, 0x0062
 454:	30 91 63 00 	lds	r19, 0x0063
 458:	21 30       	cpi	r18, 0x01	; 1
 45a:	31 05       	cpc	r19, r1
 45c:	c9 f4       	brne	.+50     	; 0x490 <__vector_2+0xd4>
	       {  goto_location1(x,y);
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	46 de       	rcall	.-884    	; 0xf0 <goto_location1>
		      send_a_string1(" ");
 464:	8e e8       	ldi	r24, 0x8E	; 142
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	35 de       	rcall	.-918    	; 0xd4 <send_a_string1>
		      goto_location1(x,++y);             //interrupt int1 for up down
 46a:	60 91 62 00 	lds	r22, 0x0062
 46e:	70 91 63 00 	lds	r23, 0x0063
 472:	6f 5f       	subi	r22, 0xFF	; 255
 474:	7f 4f       	sbci	r23, 0xFF	; 255
 476:	70 93 63 00 	sts	0x0063, r23
 47a:	60 93 62 00 	sts	0x0062, r22
 47e:	80 91 60 00 	lds	r24, 0x0060
 482:	90 91 61 00 	lds	r25, 0x0061
 486:	34 de       	rcall	.-920    	; 0xf0 <goto_location1>
	          send_a_string1("p");
 488:	80 e9       	ldi	r24, 0x90	; 144
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	23 de       	rcall	.-954    	; 0xd4 <send_a_string1>
 48e:	1b c0       	rjmp	.+54     	; 0x4c6 <__vector_2+0x10a>
		
           }
         else if(y==2)
 490:	22 30       	cpi	r18, 0x02	; 2
 492:	31 05       	cpc	r19, r1
 494:	c1 f4       	brne	.+48     	; 0x4c6 <__vector_2+0x10a>
        { 
         goto_location1(x,y);
 496:	62 e0       	ldi	r22, 0x02	; 2
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	2a de       	rcall	.-940    	; 0xf0 <goto_location1>
         send_a_string1(" ");
 49c:	8e e8       	ldi	r24, 0x8E	; 142
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	19 de       	rcall	.-974    	; 0xd4 <send_a_string1>
         goto_location1(x,--y);
 4a2:	60 91 62 00 	lds	r22, 0x0062
 4a6:	70 91 63 00 	lds	r23, 0x0063
 4aa:	61 50       	subi	r22, 0x01	; 1
 4ac:	71 09       	sbc	r23, r1
 4ae:	70 93 63 00 	sts	0x0063, r23
 4b2:	60 93 62 00 	sts	0x0062, r22
 4b6:	80 91 60 00 	lds	r24, 0x0060
 4ba:	90 91 61 00 	lds	r25, 0x0061
 4be:	18 de       	rcall	.-976    	; 0xf0 <goto_location1>
         send_a_string1("p");
 4c0:	80 e9       	ldi	r24, 0x90	; 144
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	07 de       	rcall	.-1010   	; 0xd4 <send_a_string1>
         }
	}
	if(x==16)
 4c6:	80 91 60 00 	lds	r24, 0x0060
 4ca:	90 91 61 00 	lds	r25, 0x0061
 4ce:	40 97       	sbiw	r24, 0x10	; 16
 4d0:	39 f5       	brne	.+78     	; 0x520 <__vector_2+0x164>
	{
		goto_location1(x,y);
 4d2:	60 91 62 00 	lds	r22, 0x0062
 4d6:	70 91 63 00 	lds	r23, 0x0063
 4da:	80 e1       	ldi	r24, 0x10	; 16
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	08 de       	rcall	.-1008   	; 0xf0 <goto_location1>
		send_a_string1(" ");
 4e0:	8e e8       	ldi	r24, 0x8E	; 142
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	f7 dd       	rcall	.-1042   	; 0xd4 <send_a_string1>
		goto_location1(i,j);
 4e6:	60 91 a6 00 	lds	r22, 0x00A6
 4ea:	70 91 a7 00 	lds	r23, 0x00A7
 4ee:	80 91 a8 00 	lds	r24, 0x00A8
 4f2:	90 91 a9 00 	lds	r25, 0x00A9
 4f6:	fc dd       	rcall	.-1032   	; 0xf0 <goto_location1>
		send_a_string1(" ");
 4f8:	8e e8       	ldi	r24, 0x8E	; 142
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	eb dd       	rcall	.-1066   	; 0xd4 <send_a_string1>
		goto_location1(3,1);
 4fe:	61 e0       	ldi	r22, 0x01	; 1
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	f4 dd       	rcall	.-1048   	; 0xf0 <goto_location1>
		send_a_string1("you win");
 508:	8e e9       	ldi	r24, 0x9E	; 158
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	e3 dd       	rcall	.-1082   	; 0xd4 <send_a_string1>
 50e:	2f e7       	ldi	r18, 0x7F	; 127
 510:	8a e1       	ldi	r24, 0x1A	; 26
 512:	96 e0       	ldi	r25, 0x06	; 6
 514:	21 50       	subi	r18, 0x01	; 1
 516:	80 40       	sbci	r24, 0x00	; 0
 518:	90 40       	sbci	r25, 0x00	; 0
 51a:	e1 f7       	brne	.-8      	; 0x514 <__vector_2+0x158>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <__vector_2+0x162>
 51e:	00 00       	nop
		_delay_ms(2000);
		
	}
}
 520:	ff 91       	pop	r31
 522:	ef 91       	pop	r30
 524:	bf 91       	pop	r27
 526:	af 91       	pop	r26
 528:	9f 91       	pop	r25
 52a:	8f 91       	pop	r24
 52c:	7f 91       	pop	r23
 52e:	6f 91       	pop	r22
 530:	5f 91       	pop	r21
 532:	4f 91       	pop	r20
 534:	3f 91       	pop	r19
 536:	2f 91       	pop	r18
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <__vector_1>:


ISR(INT0_vect)
{   if(i==x&&j==y)
 542:	1f 92       	push	r1
 544:	0f 92       	push	r0
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	0f 92       	push	r0
 54a:	11 24       	eor	r1, r1
 54c:	2f 93       	push	r18
 54e:	3f 93       	push	r19
 550:	4f 93       	push	r20
 552:	5f 93       	push	r21
 554:	6f 93       	push	r22
 556:	7f 93       	push	r23
 558:	8f 93       	push	r24
 55a:	9f 93       	push	r25
 55c:	af 93       	push	r26
 55e:	bf 93       	push	r27
 560:	ef 93       	push	r30
 562:	ff 93       	push	r31
 564:	20 91 a8 00 	lds	r18, 0x00A8
 568:	30 91 a9 00 	lds	r19, 0x00A9
 56c:	80 91 60 00 	lds	r24, 0x0060
 570:	90 91 61 00 	lds	r25, 0x0061
 574:	28 17       	cp	r18, r24
 576:	39 07       	cpc	r19, r25
 578:	71 f5       	brne	.+92     	; 0x5d6 <__vector_1+0x94>
 57a:	60 91 a6 00 	lds	r22, 0x00A6
 57e:	70 91 a7 00 	lds	r23, 0x00A7
 582:	40 91 62 00 	lds	r20, 0x0062
 586:	50 91 63 00 	lds	r21, 0x0063
 58a:	64 17       	cp	r22, r20
 58c:	75 07       	cpc	r23, r21
 58e:	19 f5       	brne	.+70     	; 0x5d6 <__vector_1+0x94>
	{  goto_location1(x,y);
 590:	c9 01       	movw	r24, r18
 592:	ae dd       	rcall	.-1188   	; 0xf0 <goto_location1>
		send_a_string1(" ");
 594:	8e e8       	ldi	r24, 0x8E	; 142
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	9d dd       	rcall	.-1222   	; 0xd4 <send_a_string1>
		goto_location1(i,j);
 59a:	60 91 a6 00 	lds	r22, 0x00A6
 59e:	70 91 a7 00 	lds	r23, 0x00A7
 5a2:	80 91 a8 00 	lds	r24, 0x00A8
 5a6:	90 91 a9 00 	lds	r25, 0x00A9
 5aa:	a2 dd       	rcall	.-1212   	; 0xf0 <goto_location1>
		send_a_string1(" ");
 5ac:	8e e8       	ldi	r24, 0x8E	; 142
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	91 dd       	rcall	.-1246   	; 0xd4 <send_a_string1>
		goto_location1(3,1);
 5b2:	61 e0       	ldi	r22, 0x01	; 1
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	83 e0       	ldi	r24, 0x03	; 3
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	9a dd       	rcall	.-1228   	; 0xf0 <goto_location1>
		send_a_string1("game over");
 5bc:	82 e9       	ldi	r24, 0x92	; 146
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	89 dd       	rcall	.-1262   	; 0xd4 <send_a_string1>
 5c2:	2f e7       	ldi	r18, 0x7F	; 127
 5c4:	8a e1       	ldi	r24, 0x1A	; 26
 5c6:	96 e0       	ldi	r25, 0x06	; 6
 5c8:	21 50       	subi	r18, 0x01	; 1
 5ca:	80 40       	sbci	r24, 0x00	; 0
 5cc:	90 40       	sbci	r25, 0x00	; 0
 5ce:	e1 f7       	brne	.-8      	; 0x5c8 <__vector_1+0x86>
 5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <__vector_1+0x90>
 5d2:	00 00       	nop
 5d4:	1e c0       	rjmp	.+60     	; 0x612 <__vector_1+0xd0>
		
	}    
	else
		{    
			
			goto_location1(x,y);
 5d6:	60 91 62 00 	lds	r22, 0x0062
 5da:	70 91 63 00 	lds	r23, 0x0063
 5de:	88 dd       	rcall	.-1264   	; 0xf0 <goto_location1>
		    send_a_string1(" ");
 5e0:	8e e8       	ldi	r24, 0x8E	; 142
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	77 dd       	rcall	.-1298   	; 0xd4 <send_a_string1>
		    goto_location1(x+1,y);     //for moving to right another interrupt
 5e6:	60 91 62 00 	lds	r22, 0x0062
 5ea:	70 91 63 00 	lds	r23, 0x0063
 5ee:	80 91 60 00 	lds	r24, 0x0060
 5f2:	90 91 61 00 	lds	r25, 0x0061
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	7b dd       	rcall	.-1290   	; 0xf0 <goto_location1>
		     send_a_string1("p");
 5fa:	80 e9       	ldi	r24, 0x90	; 144
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	6a dd       	rcall	.-1324   	; 0xd4 <send_a_string1>
		     x=x+1;
 600:	80 91 60 00 	lds	r24, 0x0060
 604:	90 91 61 00 	lds	r25, 0x0061
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	90 93 61 00 	sts	0x0061, r25
 60e:	80 93 60 00 	sts	0x0060, r24
	    }
	if(x==16)
 612:	80 91 60 00 	lds	r24, 0x0060
 616:	90 91 61 00 	lds	r25, 0x0061
 61a:	40 97       	sbiw	r24, 0x10	; 16
 61c:	39 f5       	brne	.+78     	; 0x66c <__vector_1+0x12a>
	{
		goto_location1(x,y);
 61e:	60 91 62 00 	lds	r22, 0x0062
 622:	70 91 63 00 	lds	r23, 0x0063
 626:	80 e1       	ldi	r24, 0x10	; 16
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	62 dd       	rcall	.-1340   	; 0xf0 <goto_location1>
		send_a_string1(" ");
 62c:	8e e8       	ldi	r24, 0x8E	; 142
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	51 dd       	rcall	.-1374   	; 0xd4 <send_a_string1>
		goto_location1(i,j);
 632:	60 91 a6 00 	lds	r22, 0x00A6
 636:	70 91 a7 00 	lds	r23, 0x00A7
 63a:	80 91 a8 00 	lds	r24, 0x00A8
 63e:	90 91 a9 00 	lds	r25, 0x00A9
 642:	56 dd       	rcall	.-1364   	; 0xf0 <goto_location1>
		send_a_string1(" ");
 644:	8e e8       	ldi	r24, 0x8E	; 142
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	45 dd       	rcall	.-1398   	; 0xd4 <send_a_string1>
		goto_location1(3,1);
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	4e dd       	rcall	.-1380   	; 0xf0 <goto_location1>
		send_a_string1("you win");
 654:	8e e9       	ldi	r24, 0x9E	; 158
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	3d dd       	rcall	.-1414   	; 0xd4 <send_a_string1>
 65a:	2f e7       	ldi	r18, 0x7F	; 127
 65c:	8a e1       	ldi	r24, 0x1A	; 26
 65e:	96 e0       	ldi	r25, 0x06	; 6
 660:	21 50       	subi	r18, 0x01	; 1
 662:	80 40       	sbci	r24, 0x00	; 0
 664:	90 40       	sbci	r25, 0x00	; 0
 666:	e1 f7       	brne	.-8      	; 0x660 <__vector_1+0x11e>
 668:	00 c0       	rjmp	.+0      	; 0x66a <__vector_1+0x128>
 66a:	00 00       	nop
	}	
		
		
		
	
 66c:	ff 91       	pop	r31
 66e:	ef 91       	pop	r30
 670:	bf 91       	pop	r27
 672:	af 91       	pop	r26
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	7f 91       	pop	r23
 67a:	6f 91       	pop	r22
 67c:	5f 91       	pop	r21
 67e:	4f 91       	pop	r20
 680:	3f 91       	pop	r19
 682:	2f 91       	pop	r18
 684:	0f 90       	pop	r0
 686:	0f be       	out	0x3f, r0	; 63
 688:	0f 90       	pop	r0
 68a:	1f 90       	pop	r1
 68c:	18 95       	reti

0000068e <_exit>:
 68e:	f8 94       	cli

00000690 <__stop_program>:
 690:	ff cf       	rjmp	.-2      	; 0x690 <__stop_program>
